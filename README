Summarize your lab:

  Part 1:
     Works  Yes 
     
  Part 2:
     Works  Yes 
     
  Part 3:
     Works  Yes 
***ANSWERS TO QUESTIONS***
 Question 1:
     Which hash table collision resolution method did you use
     (eg. chaining or open addressing)? Explain your choice
     briefly (less than 25 words).
 YOUR ANSWER:   Open addressing.
  Because when they have same hash value (key), it will be pushed to the next index of the hash table. 
 
 
 
 
 
 Question 2:
       Which hash function (division or multiplication) did you use?
       How did you convert a string into a number?
 YOUR ANSWER:  I use division fuction
      Each character has their own unique ASCII number. The sum of all the ASCII number(s) of each element in the string is the number represents that string.

 
 
 
 Question 3:
       Another legal XML tag not used in this lab is the
       stand-alone tag.  This kind of tag
       combines both a start-tag and end-tag in one.
       It is identified with a '/' (slash) preceding the
       final >.  (For example, the <foo/>
       is a stand-alone tag that is self balancing.
       
       Describe briefly how
       you would modify Part 3 to allow this kind of tag.
       
 YOUR ANSWER:  I will check the alphabet after the "<", then I will read all the character and put it in temp[x] until it reaches ">" if it does not run into "/" chacter before ">"
   However, I will modify the by code by adding if statement condition to check (ch == '/'). Then, I add it to my hash table to print it later and exit the while loop (not the EOF one).
   Next, I resume on running until I reach the end of file.

  